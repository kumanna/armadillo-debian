Description: Writing to the main diagonal of a sparse matrix via the .diag() member
function will erroneously omit elements when the target matrix has
non-zero elements.  This in turn can lead to wrong calculations
involving sparse matrices.
Forwarded: not-needed
Origin: https://gitlab.com/conradsnicta/armadillo-code/-/commit/0545b947ff4a129612c0afcf09175d784212abd8

--- armadillo-10.1.2/include/armadillo_bits/spglue_merge_meat.hpp	2016-06-17 02:22:12.000000000 +1000
+++ armadillo-10.1.2-spdiag-bugfix/include/armadillo_bits/spglue_merge_meat.hpp	2021-06-21 12:10:16.212683012 +1000
@@ -485,7 +485,7 @@
   
   while( (x_it != x_end) || (y_it != y_end) )
     {
-    eT out_val;
+    eT out_val = eT(0);
     
     const uword x_it_col = x_it.col();
     const uword x_it_row = x_it.row();
@@ -508,28 +508,29 @@
       {
       if((x_it_col < y_it_col) || ((x_it_col == y_it_col) && (x_it_row < y_it_row))) // if y is closer to the end
         {
-        out_val = (*x_it);
+        if(x_it_col != x_it_row)  { out_val = (*x_it); }  // don't take values from the main diagonal of A
         
         ++x_it;
         }
       else
         {
-        out_val = (*y_it);
+        if(y_it_col == y_it_row)  { out_val = (*y_it); use_y_loc = true; }  // take values only from the main diagonal of B
         
         ++y_it;
-        
-        use_y_loc = true;
         }
       }
     
-    access::rw(out.values[count]) = out_val;
-    
-    const uword out_row = (use_y_loc == false) ? x_it_row : y_it_row;
-    const uword out_col = (use_y_loc == false) ? x_it_col : y_it_col;
-    
-    access::rw(out.row_indices[count]) = out_row;
-    access::rw(out.col_ptrs[out_col + 1])++;
-    ++count;
+    if(out_val != eT(0))
+      {
+      access::rw(out.values[count]) = out_val;
+      
+      const uword out_row = (use_y_loc == false) ? x_it_row : y_it_row;
+      const uword out_col = (use_y_loc == false) ? x_it_col : y_it_col;
+      
+      access::rw(out.row_indices[count]) = out_row;
+      access::rw(out.col_ptrs[out_col + 1])++;
+      ++count;
+      }
     }
   
   const uword out_n_cols = out.n_cols;
